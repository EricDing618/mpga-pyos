// 基础结构
start: (metadata | statement)*

// 元数据
metadata: "@author" STRING ";"          -> author_meta
        | "@name" STRING ";"           -> name_meta
        | "@version" STRING ";"        -> version_meta
        | "@description" STRING ";"    -> desc_meta
        | "@config" ID expr ";"        -> config_meta

// 语句
statement: var_decl
         | py_block
         | command
         | reader_stmt
         | comment

// 注释
comment: SINGLE_LINE_COMMENT | MULTILINE_COMMENT
SINGLE_LINE_COMMENT: /#[^\n]*/
MULTILINE_COMMENT: /\"\"\"[^\"]*\"\"\"/

// 命令 - 支持表达式作为参数
command: "/" cmd_name cmd_args? ";" -> cmd
cmd_name: ID
cmd_args: (cmd_arg)*

// 变量声明 - 使用 expr 支持表达式
var_decl: "int" ID "=" expr ";"     -> int_decl
        | "float" ID "=" expr ";"   -> float_decl
        | "string" ID "=" expr ";"  -> string_decl
        | "bool" ID "=" expr ";"    -> bool_decl
        | "pytype" ID "=" py_block ";" -> pytype_decl

// Python代码块
py_block: "using" "PyCode" "{" py_code "}"
py_code: (PYCODE_TEXT | DICT_LIKE | STRING | BACKQUOTE_ID)*
PYCODE_TEXT: /[^{}"'\/]+/
DICT_LIKE: /\{[^{}]*\}/

// 命令参数定义
cmd_arg: STRING       -> string_value
       | INT          -> int_value
       | FLOAT        -> float_value
       | BACKQUOTE_ID -> backquote_value

// 文件读取
reader_stmt: "reader" ID "=" PATH ";"

// 表达式定义
?expr: atom
    | expr OP expr -> binary_expr
    | "(" expr ")" -> paren_expr

atom: STRING       -> string_value
    | INT          -> int_value
    | FLOAT        -> float_value
    | BACKQUOTE_ID -> backquote_value

// 词法定义
BACKQUOTE_ID: "`" ID
STRING: /"[^"]*"/ | /'[^']*'/
ID: /[a-zA-Z_][a-zA-Z0-9_]*/
INT: /-?\d+/
FLOAT: /-?\d+\.\d+/
OP: "+" | "-" | "*" | "/"
PATH: /\.?\/?[\w\/\.-]+/  // 路径定义

// 忽略规则
%ignore /#[^\n]*/       // 单行注释
%ignore /[ \t\f]+/      // 空白
%ignore /\n+/           // 换行
